package com.pl.dom;

import java.awt.Point;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;

public class Dominator extends ApplicationAdapter {
	
	private static final int VIEWPORT_WIDTH = 600;
    private static final int VIEWPORT_HEIGHT = 480;
    
	private SpriteBatch batch;
	private Texture img;
	private ShapeRenderer sr;
	private OrthographicCamera camera;
    public static Texture backgroundTexture;
    public static Sprite backgroundSprite;
	
	
	public List<Point> nodes;
	public List<Edge> edges;
	
	public Sprite circle;
	
	static final int NODE_RADIUS = 14;
	
	 private void setupCamera() {
	        camera = new OrthographicCamera(VIEWPORT_WIDTH, VIEWPORT_HEIGHT);
	        camera.position.set(camera.viewportWidth/2f, camera.viewportHeight/2f, 0);
	        camera.update();
	 }
	
	 
	@Override
	public void create () {
		
		batch = new SpriteBatch();
		sr = new ShapeRenderer();
        backgroundTexture = new Texture("background.jpg");
        backgroundSprite =new Sprite(backgroundTexture);
		
		nodes = poissonDisc(400, 400, 100);
		edges = simpleGraph(nodes);
		
		img = new Texture(Gdx.files.internal("circle.png"));
		circle = new Sprite(img);
		
		setupCamera();
		
	}
	
	 
	 
	@Override
	public void render () {
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		
    	batch.begin();
    	backgroundSprite.draw(batch);
   		batch.end();
		
		sr.setColor(Color.RED);
		sr.setProjectionMatrix(camera.combined);
		
		sr.begin(ShapeType.Line.Filled);
			for (Edge e : edges){
				sr.rectLine(e.p1.x, e.p1.y, e.p2.x, e.p2.y, 5);
			}
		sr.end();
		
		sr.begin(ShapeType.Filled);
		
		 for (Point p : nodes) {
             for (Edge e : edges) {
                 if ((p.x == e.p1.x && p.y == e.p1.y) || (p.x == e.p2.x && p.y == e.p2.y)) { // 0 fokszámú csúcsok kiszûrése
                	batch.begin();
               		batch.draw(circle, p.x, p.y, 30, 30);
               		batch.end();
                	 
                	 //sr.circle(p.x, p.y, NODE_RADIUS, NODE_RADIUS);
                  break;
                 }
             }
         }
		
		sr.end();
		
		
	}
	
	
	public static List<Edge> simpleGraph(List<Point> nodes) {
		int numEdges = nodes.size() * 2; // Élek számának megadása
		List<Edge> edges = new ArrayList<Edge>(numEdges);
		for (int i = 0; i < numEdges; i++) {
			Point p1 = nodes.get((int) (Math.random() * nodes.size()));
			Point p2 = nodes.get((int) (Math.random() * nodes.size()));
			edges.add(new Edge(p1, p2));
		}
		
		// hurkok törlése
		for (int i = 0; i < edges.size(); i++) {
			Edge e = edges.get(i);
			if (e.p1.equals(e.p2))
				edges.remove(i);
		}
		
		// párhuzamosak törlése
		for (int i = 0; i < edges.size(); i++) {
			Edge e = edges.get(i);
			for (int q = 0; q < edges.size(); q++) {
				if (i == q)
					continue;
				Edge e2 = edges.get(q);
				if (e.equals(e2))
					edges.remove(q);
			}
		}
		
		return edges;
	}
	
	public List<Point> poissonDisc(int width, int height, int minDist) {
		final int try_points = 10;
		final Rectangle bounds = new Rectangle(0, 0, width, height);
		
		Random r = new Random();
		List<Point> samplePoints = new ArrayList<Point>();
		
		double cellSize = minDist / Math.sqrt(2);
		Point[][] grid = new Point[(int) Math.ceil(height / cellSize)][(int) Math.ceil(width / cellSize)];
		List<Point> processList = new ArrayList<Point>();
		Point firstPoint = new Point(r.nextInt(width), r.nextInt(height));
		processList.add(firstPoint);
		samplePoints.add(firstPoint);
		addToCell(firstPoint, cellSize, grid);
		
		while (!processList.isEmpty()) {
			Point p = processList.remove(r.nextInt(processList.size()));
			for (int i = 0; i < try_points; i++) {
				Point newPoint = genAround(p, minDist);
				if (bounds.contains(newPoint) && !inNeighborhood(grid, newPoint, minDist, cellSize)) {
					processList.add(newPoint);
					samplePoints.add(newPoint);
					addToCell(newPoint, cellSize, grid);
				}
			}
		}
		return samplePoints;
	}
	
	public static boolean inNeighborhood(Point[][] grid, Point point, double mindist, double cellSize) {
		int gridX = (int) (point.x / cellSize);
		int gridY = (int) (point.y / cellSize);
		
		ArrayList<Point> cellsAroundPoint = new ArrayList<Point>();
		for (int x = -2; x <= 2; x++) {
			for (int y = -2; y <= 2; y++) {
				int xc = gridX + x;
				int yc = gridY + y;
				if (xc >= 0 && yc >= 0 && xc < grid.length && yc < grid[0].length)
					cellsAroundPoint.add(new Point(xc, yc));
			}
		}
		
		for (int i = 0; i < cellsAroundPoint.size(); i++) {
			Point p = cellsAroundPoint.get(i);
			if (grid[p.y][p.x] != null && Math.hypot(grid[p.y][p.x].x - point.x, grid[p.y][p.x].y - point.y) < mindist)
				return true;
		}
		return false;
	}
	
	public static Point genAround(Point point, double mindist) {
		double r1 = Math.random(); //0 és 1 közötti véletlenszerû szám
		double r2 = Math.random();
		double radius = mindist * (r1 + 1);
		double angle = 2 * Math.PI * r2;
		int newX = (int) (point.x + radius * Math.cos(angle));
		int newY = (int) (point.y + radius * Math.sin(angle));
		return new Point(newX, newY);
	}
	
	public static void addToCell(Point p, double cellSize, Point[][] grid) {
		int x = (int) (p.x / cellSize);
		int y = (int) (p.y / cellSize);
		grid[y][x] = p;
	}
	
	public static class Edge {
      
      String name;
		final Point p1, p2;
		
		Edge(Point q1, Point q2) {
			p1 = q1;
			p2 = q2;
		}
		
		public boolean equals(Edge e) {
			return e.p1.equals(p1) && e.p2.equals(p2);
		}
	}
	
}